{"mappings":"AA0FI;;;;;;;;;AASA;;;;;;AAMA;;;;;;;ACzFA;;;;;;;AAOA;;;;ACCA;;;;;;;AAOA;;;;ACwBA;;;;;;;;;;;;;AAWC;;;;;;;;;;;;;AAYA;;;;;;AAQD;;;;;;AC5EA;;;;;ACsBA;;;;;;;;;;AAUA;;;;;;;;;;;ACyCA;;;;;;AAKC;;;;;AAOD;;;;AAEC","sources":["src/product/index.svelte","src/components/input-number/index.svelte","src/components/input-text/index.svelte","src/product/edit-product-modal/index.svelte","src/components/button/index.svelte","src/product/product-item/index.svelte","src/product/product-list/index.svelte"],"sourcesContent":["<script>\n    import { Store } from './store';\n    import ProductList from './product-list/index.svelte';\n    import InputText from '/src/components/input-text/index.svelte';\n    import InputNumber from '/src/components/input-number/index.svelte';\n    import Button from '/src/components/button/index.svelte';\n    import { onMount, onDestroy } from 'svelte';\n    import { generateUUID } from '/src/lib/generate.js';\n    import { fromEvent } from 'rxjs';\n    import { debounceTime, switchMap, map, tap } from 'rxjs/operators';\n\n\n    const store = new Store();\n    let listView = true;\n    let nameRef, filterRef;\n    let form = {};\n\n    store.find();\n    const { productList$ } = store;\n\n    $: filterProductList = $productList$;\n\n    const onSave = () => {\n        productList$.next([form, ...$productList$]);\n        reset();\n    }\n\n    const onDelete = (e) => {\n        const deleteId = e.detail;\n        productList$.next($productList$.filter((it) => it.id != deleteId))\n    }\n\n    const reset = () => {\n        nameRef.myFocus();\n        form = {\n            id: generateUUID(),\n        }\n    }\n\n    onMount(() => {\n        reset();\n        const subscription = fromEvent(filterRef.getRef(), 'keyup').pipe(\n            debounceTime(500),\n            map(event => event.target.value.toLowerCase()),\n            switchMap(filterText => filter(filterText))\n        ).subscribe((res) => {\n            filterProductList = res\n        });\n\n        return ()=> {\n            subscription.unsubscribe();\n        }\n    })\n\n    onDestroy(() => {\n        console.log('onDestroy standalone')\n    })\n\n\n    const onFilter = async (e) => {\n        // const filterText = e.target.value.toLowerCase();\n        // filterProductList = await filter(filterText)\n    }\n\n    const filter = (filterText) => {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                console.log('Server search')\n                resolve($productList$.filter((it) => (it.name||'').toLowerCase().includes(filterText)));\n            }, 300)\n        })\n    }\n\n</script>\n\n<main class=\"main\">\n    <div class=\"form\">\n        <InputText value={form.id} label=\"ID\" name=\"id\" readonly={true}></InputText>\n        <InputText bind:value={form.name} bind:this={nameRef} label=\"Name\" name=\"name\" placeholder=\"Enter product name\"></InputText>\n        <InputNumber bind:value={form.price} label=\"Price\" name=\"price\" placeholder=\"Enter product price\"></InputNumber>\n    </div>\n    <Button label=\"Save\" on:click={onSave}></Button>\n    <div class=\"filter-wrapper\">\n        <InputText bind:this={filterRef} on:input={onFilter} placeholder=\"Filter text\"></InputText>\n        <Button style=\"width: 80px;\" label=\"{listView ? 'Table' : 'List'}\" on:click={()=>listView=!listView}></Button>\n    </div>\n    <ProductList on:delete={onDelete} {listView} data={filterProductList}></ProductList> \n</main>\n\n<style>\n    .main {\n        margin: 0 auto;\n        width: 50%;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        row-gap: 24px;\n    }\n\n    .form {\n        width: 100%;\n        display: flex;\n        column-gap: 24px;\n    }\n\n    .filter-wrapper {\n        width: 100%;\n        display: flex;\n        align-items: center;\n        column-gap: 12px;\n    }\n</style>","<script>\n    export let label;\n    export let value;\n    export let name;\n    export let placeholder;\n    export let readonly;\n</script>\n\n<div class=\"input-wrapper\">\n    <label for={name}>\n        {label}\n    </label>\n    <input class=\"input\" type=\"number\" bind:value {placeholder} {readonly} on:input on:keyup/>\n</div>\n\n<style>\n    .input-wrapper {\n        display: flex;\n        flex-direction: column;\n        row-gap: 6px;\n        width: 100%;\n    }\n\n    .input {\n        width: 100%;\n    }\n</style>","<script>\n    export let label;\n    export let value;\n    export let name;\n    export let placeholder;\n    export let readonly;\n\n    let ref;\n    export const myFocus = () => ref && ref.focus();\n\n    export const getRef  = () => ref;\n\n</script>\n\n<div class=\"input-wrapper\">\n    {#if label}\n        <label for={name}>\n            {label}\n        </label>\n    {/if}\n    <input bind:this={ref} {name} class=\"input\" type=\"text\" bind:value {placeholder} {readonly} on:input on:keyup/>\n</div>\n\n<style>\n    .input-wrapper {\n        display: flex;\n        flex-direction: column;\n        row-gap: 6px;\n        width: 100%;\n    }\n\n    .input {\n        width: 100%;\n    }\n</style>","<script>\n    import InputText from \"/src/components/input-text/index.svelte\";\n    import InputNumber from \"/src/components/input-number/index.svelte\";\n    import Button from \"/src/components/button/index.svelte\";\n    import { onMount } from \"svelte\";\n    import { createEventDispatcher } from 'svelte';\n\n    export let form;\n\n    const dispatch = createEventDispatcher ();\n\n    let nameRef;\n\n    onMount(() => {\n        nameRef && nameRef.myFocus();\n    });\n\n    const onSave = () => {\n        dispatch('save', form)\n    }\n\n    const onClose = () => {\n        dispatch('close')\n    }\n</script>\n\n<div class=\"modal\">\n    <div class=\"form\">\n        <div class=\"form-content\">\n            <InputText value={form.id} label=\"ID\" name=\"id\" readonly={true} />\n            <InputText\n                bind:value={form.name}\n                bind:this={nameRef}\n                label=\"Name\"\n                name=\"name\"\n                placeholder=\"Enter product name\"\n            />\n            <InputNumber\n                bind:value={form.price}\n                label=\"Price\"\n                name=\"price\"\n                placeholder=\"Enter product price\"\n            />\n        </div>\n\n        <div class=\"button-list\">\n            <Button label=\"Save\" on:click={onSave} />\n            <Button label=\"Close\" style=\"color: red;\" on:click={onClose} />\n        </div>\n       \n    </div>\n</div>\n\n\n<style>\n    .modal {\n        position: fixed;\n        display: flex;\n        align-items: center;\n        margin: 0;\n        padding: 0;\n        background: rgb(87, 86, 86);\n        opacity: 0.99;\n        z-index: 999;\n        width: 100%;\n        height: 100%;\n    }\n\n    .form {\n        width: 50%;\n        height: fit-content;\n        margin: 0 auto;\n        background: wheat;  \n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        padding: 12px;\n        row-gap: 12px;\n    }\n\n    .form-content {\n        display: flex;\n        flex-direction: column;\n        row-gap: 18px;\n    }\n\n    .button-list {\n        display: flex;\n        justify-content: center;\n        column-gap: 12px;\n    }\n</style>","<script>\n    export let label\n    export let disabled;\n    export let loading;\n    export let style;\n</script>\n\n<button {style} class=\"button\" {disabled} on:click>{loading ? 'Loading...' : label || 'Button' }</button>\n\n<style>\n    .button {\n        padding: 4px 12px;\n        border-radius: 8px;\n    }\n</style>","<script>\n    import Button from '/src/components/button/index.svelte';\n\n    export let item;\n\n    let showFloating = false;\n</script>\n\n<div class=\"card\" on:mouseenter={()=>showFloating = true} on:mouseleave={()=>showFloating=false}>\n    <div>\n        ID: {item.id}\n    </div>\n    <div>\n        Name: {item.name}\n    </div>\n    <div>\n        Price: {item.price}\n    </div>\n\n    {#if showFloating}\n        <div class=\"floating\">\n            <Button label=\"Edit\" on:click={() => onEdit(item)} />\n            <Button\n                on:click={() => onDelete(item.id)}\n                label=\"Del\"\n                style=\"color: red;\"\n            />\n        </div>\n    {/if}\n</div>\n\n<style>\n    .card {\n        position: relative;\n        border: 1px solid gray;\n        border-radius: 10px;\n        padding: 12px;\n        background: rgb(238, 236, 236);\n        min-width: 250px;\n        flex: 1;\n    }\n\n    .floating {\n        position: absolute;\n        top: 0;\n        right: 0;\n        background: rgb(231, 237, 196);\n        display: flex;\n        flex-direction: column;\n        row-gap: 4px;\n        padding: 6px;\n    }\n</style>\n","<script>\n    import ProductItem from \"../product-item/index.svelte\";\n    import Button from '/src/components/button/index.svelte';\n    import EditProductModal from '../edit-product-modal/index.svelte';\n\n    import { createEventDispatcher } from 'svelte';\n\n    export let data;\n    export let listView = true;\n\n    const dispatch = createEventDispatcher();\n\n    let showModal = false;\n    let editForm = {};\n\n    const onDelete = (event) => {\n        dispatch('delete', event.detail)\n    }\n\n    const onEdit = (event) => {\n        editForm = event.detail;\n        showModal = true;\n    }\n\n    const onSave = (e) => {\n        const newForm = e.detail;\n        const foundIndex = data.findIndex((it) => it.id == newForm.id);\n\n        if (foundIndex > -1) {\n            data[foundIndex] = newForm;\n        }\n        showModal = false;\n    }\n    const onCloseModal = () => showModal = false;\n</script>\n\n{#if showModal}\n    <EditProductModal form={editForm} on:save={onSave} on:close={onCloseModal}></EditProductModal>\n{/if}\n\n{#if listView}\n    <div class=\"list\">\n        {#if Array.isArray(data)}\n            {#each data as item}\n                <ProductItem {item} on:edit={onEdit} on:delete={onDelete}/>\n            {/each}\n        {/if}\n    </div>\n{:else}\n    <table border=\"1\" class=\"table\">\n        <thead>\n            <th>#</th>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Price</th>\n            <th>Action</th>\n        </thead>\n        {#if Array.isArray(data)}\n            <tbody>\n                {#if data.length > 0}\n                    {#each data as item, index}\n                        <tr>\n                            <td>{index + 1}</td>\n                            <td>{item.id}</td>\n                            <td>{item.name}</td>\n                            <td>{item.price}</td>\n                            <td>\n                                <Button label=\"Edit\" on:click={()=>onEdit({detail: item})}></Button>\n                                <Button on:click={() => onDelete({detail: item.id})} label=\"Del\" style=\"color: red;\"></Button>\n                            </td>\n                        </tr>\n                    {/each}\n                {:else}\n                    <tr>\n                        <td colspan=\"5\">No more data</td>\n                    </tr>\n                {/if}\n            </tbody>\n        {/if}\n    </table>\n{/if}\n\n<style>\n    .list {\n        display: flex;\n        column-gap: 12px;\n        row-gap: 12px;\n        flex-wrap: wrap;\n    }\n\n    .table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    .table th {\n        padding: 8px;\n    }\n\n    .table td {\n        padding: 4px;\n    }\n</style>\n"],"names":[],"version":3,"file":"index.02297199.css.map","sourceRoot":"/__parcel_source_root/"}